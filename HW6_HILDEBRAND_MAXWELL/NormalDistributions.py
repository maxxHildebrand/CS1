#Max Hildebrand
#This program works with the normal distribution using SAT math scores generated by a random.gauss function
#3/28/2023

import random

print('This program works with the normal distribution using SAT math scores generated by a random.gauss function')

freqList = [[] for y in range(6)]


numScores = int(input('Enter the desired number of SAT math scores: '))
meanScores = int(input('Enter the desired mean of scores: '))
standardDev = int(input('Enter the desired standard deviation of scores: '))

count = 0
totalScore = 0
totalDistance = 0
while count < numScores:
    score = random.gauss(meanScores, standardDev)
    if score >= 200 and score <= 800:
        if score == 800:
            score = 799
        elif score == 200:
            score = 201
        zScore = (score - meanScores)//standardDev
        if zScore == -3:
            freqList[0].append(score)
        elif zScore == -2:
            freqList[1].append(score)
        elif zScore == -1:
            freqList[2].append(score)
        elif zScore == 0:
            freqList[3].append(score)
        elif zScore == 1:
            freqList[4].append(score)
        elif zScore == 2:
            freqList[5].append(score)
        count = count + 1
        totalScore = totalScore + score
        totalDistance = totalDistance + (abs(zScore))

mean = totalScore / count
resultDev = ((((totalDistance)**2)/count) - ((totalDistance/count)**2)) **1/2

print(mean, 'is the mean.')
print(standardDev, 'is the standard Deviation.')
print('Score buckets: ', len(freqList[0]), ',', len(freqList[1]), ',', len(freqList[2]), ',', len(freqList[3]), ',', len(freqList[4]), ',', len(freqList[5]))
print('Percentage of score buckets: ', round((len(freqList[0])/count) * 100, 2), ',', round((len(freqList[1])/count) * 100, 2), ',', round((len(freqList[2])/count) * 100, 2), ',', round((len(freqList[3])/count) * 100, 2), ',', round((len(freqList[4])/count) * 100, 2), ',', round((len(freqList[5])/count) * 100, 2))
    




        
        
        
